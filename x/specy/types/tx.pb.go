// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: specy/specy/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/ibc-go/v6/modules/apps/27-interchain-accounts/controller/types"
	types1 "github.com/cosmos/ibc-go/v6/modules/apps/27-interchain-accounts/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateTask struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionId string `protobuf:"bytes,3,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	Msg          string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	RuleFiles    string `protobuf:"bytes,5,opt,name=ruleFiles,proto3" json:"ruleFiles,omitempty"`
	TaskType     uint64 `protobuf:"varint,6,opt,name=taskType,proto3" json:"taskType,omitempty"`
	IntervalType uint64 `protobuf:"varint,7,opt,name=intervalType,proto3" json:"intervalType,omitempty"`
	Number       uint64 `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`
	CheckData    string `protobuf:"bytes,9,opt,name=checkData,proto3" json:"checkData,omitempty"`
}

func (m *MsgCreateTask) Reset()         { *m = MsgCreateTask{} }
func (m *MsgCreateTask) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTask) ProtoMessage()    {}
func (*MsgCreateTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{0}
}
func (m *MsgCreateTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTask.Merge(m, src)
}
func (m *MsgCreateTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTask proto.InternalMessageInfo

func (m *MsgCreateTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateTask) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgCreateTask) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgCreateTask) GetRuleFiles() string {
	if m != nil {
		return m.RuleFiles
	}
	return ""
}

func (m *MsgCreateTask) GetTaskType() uint64 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *MsgCreateTask) GetIntervalType() uint64 {
	if m != nil {
		return m.IntervalType
	}
	return 0
}

func (m *MsgCreateTask) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MsgCreateTask) GetCheckData() string {
	if m != nil {
		return m.CheckData
	}
	return ""
}

type MsgCreateTaskResponse struct {
}

func (m *MsgCreateTaskResponse) Reset()         { *m = MsgCreateTaskResponse{} }
func (m *MsgCreateTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTaskResponse) ProtoMessage()    {}
func (*MsgCreateTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{1}
}
func (m *MsgCreateTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTaskResponse.Merge(m, src)
}
func (m *MsgCreateTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTaskResponse proto.InternalMessageInfo

type MsgCancelTask struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgCancelTask) Reset()         { *m = MsgCancelTask{} }
func (m *MsgCancelTask) String() string { return proto.CompactTextString(m) }
func (*MsgCancelTask) ProtoMessage()    {}
func (*MsgCancelTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{2}
}
func (m *MsgCancelTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelTask.Merge(m, src)
}
func (m *MsgCancelTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelTask proto.InternalMessageInfo

func (m *MsgCancelTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MsgCancelTaskResponse struct {
}

func (m *MsgCancelTaskResponse) Reset()         { *m = MsgCancelTaskResponse{} }
func (m *MsgCancelTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelTaskResponse) ProtoMessage()    {}
func (*MsgCancelTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{3}
}
func (m *MsgCancelTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelTaskResponse.Merge(m, src)
}
func (m *MsgCancelTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelTaskResponse proto.InternalMessageInfo

type MsgEditTask struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionId string `protobuf:"bytes,3,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	Msg          string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	RuleFiles    string `protobuf:"bytes,5,opt,name=ruleFiles,proto3" json:"ruleFiles,omitempty"`
	TaskType     uint64 `protobuf:"varint,6,opt,name=taskType,proto3" json:"taskType,omitempty"`
	IntervalType uint64 `protobuf:"varint,7,opt,name=intervalType,proto3" json:"intervalType,omitempty"`
	Number       uint64 `protobuf:"varint,8,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *MsgEditTask) Reset()         { *m = MsgEditTask{} }
func (m *MsgEditTask) String() string { return proto.CompactTextString(m) }
func (*MsgEditTask) ProtoMessage()    {}
func (*MsgEditTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{4}
}
func (m *MsgEditTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditTask.Merge(m, src)
}
func (m *MsgEditTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditTask proto.InternalMessageInfo

func (m *MsgEditTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgEditTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgEditTask) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgEditTask) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgEditTask) GetRuleFiles() string {
	if m != nil {
		return m.RuleFiles
	}
	return ""
}

func (m *MsgEditTask) GetTaskType() uint64 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *MsgEditTask) GetIntervalType() uint64 {
	if m != nil {
		return m.IntervalType
	}
	return 0
}

func (m *MsgEditTask) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MsgEditTaskResponse struct {
}

func (m *MsgEditTaskResponse) Reset()         { *m = MsgEditTaskResponse{} }
func (m *MsgEditTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditTaskResponse) ProtoMessage()    {}
func (*MsgEditTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{5}
}
func (m *MsgEditTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditTaskResponse.Merge(m, src)
}
func (m *MsgEditTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditTaskResponse proto.InternalMessageInfo

type MsgCreateExecutor struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IasAttestationReport string `protobuf:"bytes,2,opt,name=iasAttestationReport,proto3" json:"iasAttestationReport,omitempty"`
	EnclavePk            string `protobuf:"bytes,3,opt,name=enclavePk,proto3" json:"enclavePk,omitempty"`
}

func (m *MsgCreateExecutor) Reset()         { *m = MsgCreateExecutor{} }
func (m *MsgCreateExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExecutor) ProtoMessage()    {}
func (*MsgCreateExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{6}
}
func (m *MsgCreateExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExecutor.Merge(m, src)
}
func (m *MsgCreateExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExecutor proto.InternalMessageInfo

func (m *MsgCreateExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateExecutor) GetIasAttestationReport() string {
	if m != nil {
		return m.IasAttestationReport
	}
	return ""
}

func (m *MsgCreateExecutor) GetEnclavePk() string {
	if m != nil {
		return m.EnclavePk
	}
	return ""
}

type MsgCreateExecutorResponse struct {
}

func (m *MsgCreateExecutorResponse) Reset()         { *m = MsgCreateExecutorResponse{} }
func (m *MsgCreateExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateExecutorResponse) ProtoMessage()    {}
func (*MsgCreateExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{7}
}
func (m *MsgCreateExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateExecutorResponse.Merge(m, src)
}
func (m *MsgCreateExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateExecutorResponse proto.InternalMessageInfo

type MsgCancelExecutor struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgCancelExecutor) Reset()         { *m = MsgCancelExecutor{} }
func (m *MsgCancelExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgCancelExecutor) ProtoMessage()    {}
func (*MsgCancelExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{8}
}
func (m *MsgCancelExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelExecutor.Merge(m, src)
}
func (m *MsgCancelExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelExecutor proto.InternalMessageInfo

func (m *MsgCancelExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgCancelExecutorResponse struct {
}

func (m *MsgCancelExecutorResponse) Reset()         { *m = MsgCancelExecutorResponse{} }
func (m *MsgCancelExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelExecutorResponse) ProtoMessage()    {}
func (*MsgCancelExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{9}
}
func (m *MsgCancelExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelExecutorResponse.Merge(m, src)
}
func (m *MsgCancelExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelExecutorResponse proto.InternalMessageInfo

type MsgEditExecutor struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IasAttestationReport string `protobuf:"bytes,2,opt,name=iasAttestationReport,proto3" json:"iasAttestationReport,omitempty"`
	EnclavePk            string `protobuf:"bytes,3,opt,name=enclavePk,proto3" json:"enclavePk,omitempty"`
}

func (m *MsgEditExecutor) Reset()         { *m = MsgEditExecutor{} }
func (m *MsgEditExecutor) String() string { return proto.CompactTextString(m) }
func (*MsgEditExecutor) ProtoMessage()    {}
func (*MsgEditExecutor) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{10}
}
func (m *MsgEditExecutor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditExecutor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditExecutor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditExecutor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditExecutor.Merge(m, src)
}
func (m *MsgEditExecutor) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditExecutor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditExecutor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditExecutor proto.InternalMessageInfo

func (m *MsgEditExecutor) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgEditExecutor) GetIasAttestationReport() string {
	if m != nil {
		return m.IasAttestationReport
	}
	return ""
}

func (m *MsgEditExecutor) GetEnclavePk() string {
	if m != nil {
		return m.EnclavePk
	}
	return ""
}

type MsgEditExecutorResponse struct {
}

func (m *MsgEditExecutorResponse) Reset()         { *m = MsgEditExecutorResponse{} }
func (m *MsgEditExecutorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditExecutorResponse) ProtoMessage()    {}
func (*MsgEditExecutorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{11}
}
func (m *MsgEditExecutorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditExecutorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditExecutorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditExecutorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditExecutorResponse.Merge(m, src)
}
func (m *MsgEditExecutorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditExecutorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditExecutorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditExecutorResponse proto.InternalMessageInfo

type MsgDepositBalance struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositBalance) Reset()         { *m = MsgDepositBalance{} }
func (m *MsgDepositBalance) String() string { return proto.CompactTextString(m) }
func (*MsgDepositBalance) ProtoMessage()    {}
func (*MsgDepositBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{12}
}
func (m *MsgDepositBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositBalance.Merge(m, src)
}
func (m *MsgDepositBalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositBalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositBalance proto.InternalMessageInfo

func (m *MsgDepositBalance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDepositBalance) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgDepositBalanceResponse struct {
}

func (m *MsgDepositBalanceResponse) Reset()         { *m = MsgDepositBalanceResponse{} }
func (m *MsgDepositBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositBalanceResponse) ProtoMessage()    {}
func (*MsgDepositBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{13}
}
func (m *MsgDepositBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositBalanceResponse.Merge(m, src)
}
func (m *MsgDepositBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositBalanceResponse proto.InternalMessageInfo

type MsgWithdrawBalance struct {
	Creator string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawBalance) Reset()         { *m = MsgWithdrawBalance{} }
func (m *MsgWithdrawBalance) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBalance) ProtoMessage()    {}
func (*MsgWithdrawBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{14}
}
func (m *MsgWithdrawBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBalance.Merge(m, src)
}
func (m *MsgWithdrawBalance) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBalance.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBalance proto.InternalMessageInfo

func (m *MsgWithdrawBalance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawBalance) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgWithdrawBalanceResponse struct {
}

func (m *MsgWithdrawBalanceResponse) Reset()         { *m = MsgWithdrawBalanceResponse{} }
func (m *MsgWithdrawBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBalanceResponse) ProtoMessage()    {}
func (*MsgWithdrawBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{15}
}
func (m *MsgWithdrawBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBalanceResponse.Merge(m, src)
}
func (m *MsgWithdrawBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBalanceResponse proto.InternalMessageInfo

type MsgExecuteTask struct {
	Creator    string                             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner      string                             `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Name       string                             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Cproof     string                             `protobuf:"bytes,4,opt,name=cproof,proto3" json:"cproof,omitempty"`
	PacketData types1.InterchainAccountPacketData `protobuf:"bytes,5,opt,name=packet_data,json=packetData,proto3" json:"packet_data"`
}

func (m *MsgExecuteTask) Reset()         { *m = MsgExecuteTask{} }
func (m *MsgExecuteTask) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteTask) ProtoMessage()    {}
func (*MsgExecuteTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{16}
}
func (m *MsgExecuteTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteTask.Merge(m, src)
}
func (m *MsgExecuteTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteTask proto.InternalMessageInfo

func (m *MsgExecuteTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExecuteTask) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgExecuteTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgExecuteTask) GetCproof() string {
	if m != nil {
		return m.Cproof
	}
	return ""
}

func (m *MsgExecuteTask) GetPacketData() types1.InterchainAccountPacketData {
	if m != nil {
		return m.PacketData
	}
	return types1.InterchainAccountPacketData{}
}

type MsgExecuteTaskResponse struct {
}

func (m *MsgExecuteTaskResponse) Reset()         { *m = MsgExecuteTaskResponse{} }
func (m *MsgExecuteTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteTaskResponse) ProtoMessage()    {}
func (*MsgExecuteTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d423b38dbbc1bc0, []int{17}
}
func (m *MsgExecuteTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteTaskResponse.Merge(m, src)
}
func (m *MsgExecuteTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteTaskResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateTask)(nil), "specynetwork.specy.specy.MsgCreateTask")
	proto.RegisterType((*MsgCreateTaskResponse)(nil), "specynetwork.specy.specy.MsgCreateTaskResponse")
	proto.RegisterType((*MsgCancelTask)(nil), "specynetwork.specy.specy.MsgCancelTask")
	proto.RegisterType((*MsgCancelTaskResponse)(nil), "specynetwork.specy.specy.MsgCancelTaskResponse")
	proto.RegisterType((*MsgEditTask)(nil), "specynetwork.specy.specy.MsgEditTask")
	proto.RegisterType((*MsgEditTaskResponse)(nil), "specynetwork.specy.specy.MsgEditTaskResponse")
	proto.RegisterType((*MsgCreateExecutor)(nil), "specynetwork.specy.specy.MsgCreateExecutor")
	proto.RegisterType((*MsgCreateExecutorResponse)(nil), "specynetwork.specy.specy.MsgCreateExecutorResponse")
	proto.RegisterType((*MsgCancelExecutor)(nil), "specynetwork.specy.specy.MsgCancelExecutor")
	proto.RegisterType((*MsgCancelExecutorResponse)(nil), "specynetwork.specy.specy.MsgCancelExecutorResponse")
	proto.RegisterType((*MsgEditExecutor)(nil), "specynetwork.specy.specy.MsgEditExecutor")
	proto.RegisterType((*MsgEditExecutorResponse)(nil), "specynetwork.specy.specy.MsgEditExecutorResponse")
	proto.RegisterType((*MsgDepositBalance)(nil), "specynetwork.specy.specy.MsgDepositBalance")
	proto.RegisterType((*MsgDepositBalanceResponse)(nil), "specynetwork.specy.specy.MsgDepositBalanceResponse")
	proto.RegisterType((*MsgWithdrawBalance)(nil), "specynetwork.specy.specy.MsgWithdrawBalance")
	proto.RegisterType((*MsgWithdrawBalanceResponse)(nil), "specynetwork.specy.specy.MsgWithdrawBalanceResponse")
	proto.RegisterType((*MsgExecuteTask)(nil), "specynetwork.specy.specy.MsgExecuteTask")
	proto.RegisterType((*MsgExecuteTaskResponse)(nil), "specynetwork.specy.specy.MsgExecuteTaskResponse")
}

func init() { proto.RegisterFile("specy/specy/tx.proto", fileDescriptor_7d423b38dbbc1bc0) }

var fileDescriptor_7d423b38dbbc1bc0 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0x8e, 0x49, 0x08, 0xf0, 0x42, 0xa1, 0x75, 0x03, 0x18, 0x17, 0xa5, 0x28, 0x52, 0x55, 0x2a,
	0xc0, 0x6e, 0x00, 0xa9, 0xa7, 0x1e, 0xf8, 0x29, 0x71, 0x88, 0x84, 0x22, 0xa4, 0x4a, 0xbd, 0xd0,
	0xc9, 0x64, 0x70, 0xac, 0x38, 0x33, 0x96, 0x67, 0x12, 0xe0, 0x50, 0xf5, 0xd8, 0x6b, 0xff, 0x2c,
	0x8e, 0x1c, 0xbb, 0x97, 0xd5, 0x8a, 0x1c, 0xf6, 0xdf, 0x58, 0x79, 0x6c, 0x4f, 0xe2, 0x10, 0x12,
	0x73, 0x58, 0xad, 0xb4, 0x97, 0xc8, 0xef, 0xbd, 0x6f, 0xde, 0xf7, 0xde, 0x97, 0xf8, 0xcb, 0x40,
	0x99, 0xfb, 0x04, 0x3f, 0xd8, 0xd1, 0xa7, 0xb8, 0xb7, 0xfc, 0x80, 0x09, 0xa6, 0x1b, 0x32, 0xa6,
	0x44, 0xdc, 0xb1, 0xa0, 0x63, 0xc9, 0x20, 0xfa, 0x34, 0xcb, 0x0e, 0x73, 0x98, 0x04, 0xd9, 0xe1,
	0x53, 0x84, 0x37, 0x2b, 0x98, 0xf1, 0x2e, 0xe3, 0x76, 0x13, 0x71, 0x62, 0xf7, 0x6b, 0x4d, 0x22,
	0x50, 0xcd, 0xc6, 0xcc, 0xa5, 0x71, 0xfd, 0xc8, 0x6d, 0x62, 0x1b, 0xf9, 0xbe, 0xe7, 0x62, 0x24,
	0x5c, 0x46, 0xb9, 0xed, 0x52, 0x41, 0x02, 0xdc, 0x46, 0x2e, 0xbd, 0x41, 0x18, 0xb3, 0x1e, 0x15,
	0xdc, 0xee, 0xd7, 0x6c, 0x1f, 0xe1, 0x0e, 0x11, 0xf1, 0xa9, 0xd3, 0x4c, 0xa7, 0x30, 0xa3, 0x22,
	0x60, 0x9e, 0x47, 0x82, 0xb0, 0xc1, 0x30, 0x8a, 0x9a, 0x54, 0xff, 0x9d, 0x83, 0x6f, 0xea, 0xdc,
	0x39, 0x0d, 0x08, 0x12, 0xe4, 0x1a, 0xf1, 0x8e, 0x6e, 0xc0, 0x02, 0x0e, 0x23, 0x16, 0x18, 0xda,
	0xb6, 0xb6, 0xb3, 0xd4, 0x48, 0x42, 0x5d, 0x87, 0x02, 0x45, 0x5d, 0x62, 0xcc, 0xc9, 0xb4, 0x7c,
	0xd6, 0xab, 0xb0, 0x8c, 0x19, 0xa5, 0x04, 0x87, 0x13, 0x5c, 0xb6, 0x8c, 0xbc, 0xac, 0xa5, 0x72,
	0xfa, 0xb7, 0x90, 0xef, 0x72, 0xc7, 0x28, 0xc8, 0x52, 0xf8, 0xa8, 0x6f, 0xc1, 0x52, 0xd0, 0xf3,
	0xc8, 0x85, 0xeb, 0x11, 0x6e, 0xcc, 0xcb, 0xfc, 0x30, 0xa1, 0x9b, 0xb0, 0x28, 0x10, 0xef, 0x5c,
	0x3f, 0xf8, 0xc4, 0x28, 0x6e, 0x6b, 0x3b, 0x85, 0x86, 0x8a, 0x43, 0x3e, 0xb9, 0x65, 0x1f, 0x79,
	0xb2, 0xbe, 0x20, 0xeb, 0xa9, 0x9c, 0xbe, 0x0e, 0x45, 0xda, 0xeb, 0x36, 0x49, 0x60, 0x2c, 0xca,
	0x6a, 0x1c, 0x85, 0xac, 0xb8, 0x4d, 0x70, 0xe7, 0x0c, 0x09, 0x64, 0x2c, 0x45, 0xac, 0x2a, 0x51,
	0xdd, 0x80, 0xb5, 0x94, 0x10, 0x0d, 0xc2, 0x7d, 0x46, 0x39, 0xa9, 0xfe, 0x1e, 0x29, 0x84, 0x28,
	0x26, 0xde, 0xdb, 0x15, 0x4a, 0xfa, 0xaa, 0xe3, 0xaa, 0xef, 0x47, 0x0d, 0x4a, 0x75, 0xee, 0x9c,
	0xb7, 0x5c, 0xf1, 0x75, 0x0b, 0x5f, 0x5d, 0x83, 0xef, 0x47, 0x16, 0x55, 0x02, 0xfc, 0x03, 0xdf,
	0x29, 0xc5, 0xcf, 0xef, 0x09, 0xee, 0x85, 0xbb, 0xbe, 0xae, 0xc2, 0x01, 0x94, 0x5d, 0xc4, 0x8f,
	0x85, 0x20, 0x5c, 0xc8, 0x1f, 0x7c, 0x83, 0xf8, 0x2c, 0x10, 0xb1, 0x2a, 0x13, 0x6b, 0xe1, 0xbe,
	0x84, 0x62, 0x0f, 0xf5, 0xc9, 0x55, 0x27, 0x96, 0x68, 0x98, 0xa8, 0xfe, 0x00, 0x9b, 0x2f, 0x06,
	0x50, 0xd3, 0xed, 0x47, 0xd3, 0xc9, 0xef, 0x6d, 0xf6, 0x74, 0x49, 0xaf, 0x14, 0x5c, 0xf5, 0xfa,
	0x1b, 0x56, 0x63, 0x01, 0xbe, 0xc8, 0x9e, 0x9b, 0xb0, 0x31, 0x46, 0xaf, 0x26, 0xbb, 0x95, 0x5b,
	0x9e, 0x11, 0x9f, 0x71, 0x57, 0x9c, 0x20, 0x2f, 0x9c, 0x7f, 0xca, 0x6c, 0xbf, 0x41, 0x11, 0x75,
	0x43, 0x63, 0x91, 0xd3, 0x94, 0x0e, 0x36, 0xad, 0xc8, 0xda, 0xac, 0xd0, 0xda, 0xac, 0xd8, 0xda,
	0xac, 0x53, 0xe6, 0xd2, 0x93, 0xc2, 0xe3, 0xfb, 0x1f, 0x73, 0x8d, 0x18, 0x1e, 0xcb, 0x93, 0xe6,
	0x51, 0x43, 0x38, 0xa0, 0xd7, 0xb9, 0xf3, 0x87, 0x2b, 0xda, 0xad, 0x00, 0xdd, 0x7d, 0xc6, 0x29,
	0xb6, 0xc0, 0x7c, 0x49, 0xa4, 0xc6, 0x78, 0xa7, 0xc1, 0x4a, 0xa8, 0x93, 0xd4, 0x68, 0x96, 0x19,
	0x96, 0x61, 0x9e, 0xdd, 0x51, 0x12, 0xc4, 0x5f, 0x4b, 0x14, 0xa8, 0x37, 0x35, 0x3f, 0xf2, 0xa6,
	0xae, 0x43, 0x11, 0xfb, 0x01, 0x63, 0xb7, 0xf1, 0x8b, 0x18, 0x47, 0x7a, 0x07, 0x4a, 0x91, 0x9f,
	0xdf, 0xb4, 0x42, 0x43, 0x9a, 0x97, 0xab, 0x9c, 0x59, 0x6e, 0x13, 0x5b, 0xa3, 0xae, 0x6e, 0x4d,
	0x70, 0x75, 0xab, 0x5f, 0xb3, 0x2e, 0x55, 0xfa, 0x38, 0xca, 0x5e, 0xc9, 0x66, 0xa1, 0x97, 0xc5,
	0x5b, 0x83, 0xaf, 0x32, 0x55, 0x03, 0xd6, 0xd3, 0xab, 0x25, 0x5b, 0x1f, 0x0c, 0x16, 0x20, 0x5f,
	0xe7, 0x8e, 0x7e, 0x0b, 0x30, 0xf2, 0x2f, 0xf0, 0xb3, 0xf5, 0xda, 0x7f, 0x9c, 0x95, 0x72, 0x49,
	0xd3, 0xce, 0x08, 0x4c, 0xf8, 0x24, 0xcf, 0xd0, 0x4b, 0x67, 0xf0, 0x28, 0xe0, 0x2c, 0x9e, 0x17,
	0xf6, 0xaa, 0xff, 0x05, 0x8b, 0xca, 0x5a, 0x7f, 0x9a, 0x7a, 0x38, 0x81, 0x99, 0xfb, 0x99, 0x60,
	0x8a, 0x21, 0x80, 0x95, 0x31, 0xf3, 0xda, 0xcd, 0x20, 0x46, 0x02, 0x36, 0x0f, 0xdf, 0x00, 0x4e,
	0x71, 0xa6, 0x2d, 0x69, 0x37, 0x83, 0x30, 0x59, 0x39, 0x27, 0xba, 0x97, 0xee, 0xc1, 0x72, 0xca,
	0xba, 0x7e, 0x99, 0x29, 0x93, 0xe2, 0xab, 0x65, 0x86, 0x8e, 0x6e, 0x38, 0x66, 0x47, 0xd3, 0x37,
	0x4c, 0x83, 0x67, 0x6c, 0x38, 0xd9, 0x80, 0xf4, 0x1e, 0xac, 0x8e, 0xbb, 0xcf, 0xde, 0xd4, 0x3e,
	0x63, 0x68, 0xf3, 0xe8, 0x2d, 0x68, 0x45, 0xeb, 0x42, 0x69, 0xd4, 0x6c, 0x76, 0xa6, 0x8b, 0x35,
	0x44, 0x9a, 0xbf, 0x66, 0x45, 0x26, 0x54, 0x27, 0x17, 0x8f, 0xcf, 0x15, 0xed, 0xe9, 0xb9, 0xa2,
	0x7d, 0x78, 0xae, 0x68, 0xff, 0x0d, 0x2a, 0xb9, 0xa7, 0x41, 0x25, 0xf7, 0xff, 0xa0, 0x92, 0xfb,
	0x73, 0xcf, 0x71, 0x45, 0xbb, 0xd7, 0xb4, 0x30, 0xeb, 0x46, 0xf7, 0xdc, 0xfd, 0xb8, 0x6d, 0x7c,
	0xeb, 0xbd, 0x4f, 0x6e, 0xbf, 0x0f, 0x3e, 0xe1, 0xcd, 0xa2, 0xbc, 0x36, 0x1e, 0x7e, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xe7, 0xf4, 0xad, 0xee, 0x19, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateTask(ctx context.Context, in *MsgCreateTask, opts ...grpc.CallOption) (*MsgCreateTaskResponse, error)
	CancelTask(ctx context.Context, in *MsgCancelTask, opts ...grpc.CallOption) (*MsgCancelTaskResponse, error)
	EditTask(ctx context.Context, in *MsgEditTask, opts ...grpc.CallOption) (*MsgEditTaskResponse, error)
	CreateExecutor(ctx context.Context, in *MsgCreateExecutor, opts ...grpc.CallOption) (*MsgCreateExecutorResponse, error)
	CancelExecutor(ctx context.Context, in *MsgCancelExecutor, opts ...grpc.CallOption) (*MsgCancelExecutorResponse, error)
	EditExecutor(ctx context.Context, in *MsgEditExecutor, opts ...grpc.CallOption) (*MsgEditExecutorResponse, error)
	DepositBalance(ctx context.Context, in *MsgDepositBalance, opts ...grpc.CallOption) (*MsgDepositBalanceResponse, error)
	WithdrawBalance(ctx context.Context, in *MsgWithdrawBalance, opts ...grpc.CallOption) (*MsgWithdrawBalanceResponse, error)
	ExecuteTask(ctx context.Context, in *MsgExecuteTask, opts ...grpc.CallOption) (*MsgExecuteTaskResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateTask(ctx context.Context, in *MsgCreateTask, opts ...grpc.CallOption) (*MsgCreateTaskResponse, error) {
	out := new(MsgCreateTaskResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelTask(ctx context.Context, in *MsgCancelTask, opts ...grpc.CallOption) (*MsgCancelTaskResponse, error) {
	out := new(MsgCancelTaskResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/CancelTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditTask(ctx context.Context, in *MsgEditTask, opts ...grpc.CallOption) (*MsgEditTaskResponse, error) {
	out := new(MsgEditTaskResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/EditTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateExecutor(ctx context.Context, in *MsgCreateExecutor, opts ...grpc.CallOption) (*MsgCreateExecutorResponse, error) {
	out := new(MsgCreateExecutorResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/CreateExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelExecutor(ctx context.Context, in *MsgCancelExecutor, opts ...grpc.CallOption) (*MsgCancelExecutorResponse, error) {
	out := new(MsgCancelExecutorResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/CancelExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditExecutor(ctx context.Context, in *MsgEditExecutor, opts ...grpc.CallOption) (*MsgEditExecutorResponse, error) {
	out := new(MsgEditExecutorResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/EditExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositBalance(ctx context.Context, in *MsgDepositBalance, opts ...grpc.CallOption) (*MsgDepositBalanceResponse, error) {
	out := new(MsgDepositBalanceResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/DepositBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawBalance(ctx context.Context, in *MsgWithdrawBalance, opts ...grpc.CallOption) (*MsgWithdrawBalanceResponse, error) {
	out := new(MsgWithdrawBalanceResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/WithdrawBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteTask(ctx context.Context, in *MsgExecuteTask, opts ...grpc.CallOption) (*MsgExecuteTaskResponse, error) {
	out := new(MsgExecuteTaskResponse)
	err := c.cc.Invoke(ctx, "/specynetwork.specy.specy.Msg/ExecuteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateTask(context.Context, *MsgCreateTask) (*MsgCreateTaskResponse, error)
	CancelTask(context.Context, *MsgCancelTask) (*MsgCancelTaskResponse, error)
	EditTask(context.Context, *MsgEditTask) (*MsgEditTaskResponse, error)
	CreateExecutor(context.Context, *MsgCreateExecutor) (*MsgCreateExecutorResponse, error)
	CancelExecutor(context.Context, *MsgCancelExecutor) (*MsgCancelExecutorResponse, error)
	EditExecutor(context.Context, *MsgEditExecutor) (*MsgEditExecutorResponse, error)
	DepositBalance(context.Context, *MsgDepositBalance) (*MsgDepositBalanceResponse, error)
	WithdrawBalance(context.Context, *MsgWithdrawBalance) (*MsgWithdrawBalanceResponse, error)
	ExecuteTask(context.Context, *MsgExecuteTask) (*MsgExecuteTaskResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateTask(ctx context.Context, req *MsgCreateTask) (*MsgCreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedMsgServer) CancelTask(ctx context.Context, req *MsgCancelTask) (*MsgCancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (*UnimplementedMsgServer) EditTask(ctx context.Context, req *MsgEditTask) (*MsgEditTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTask not implemented")
}
func (*UnimplementedMsgServer) CreateExecutor(ctx context.Context, req *MsgCreateExecutor) (*MsgCreateExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecutor not implemented")
}
func (*UnimplementedMsgServer) CancelExecutor(ctx context.Context, req *MsgCancelExecutor) (*MsgCancelExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExecutor not implemented")
}
func (*UnimplementedMsgServer) EditExecutor(ctx context.Context, req *MsgEditExecutor) (*MsgEditExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditExecutor not implemented")
}
func (*UnimplementedMsgServer) DepositBalance(ctx context.Context, req *MsgDepositBalance) (*MsgDepositBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositBalance not implemented")
}
func (*UnimplementedMsgServer) WithdrawBalance(ctx context.Context, req *MsgWithdrawBalance) (*MsgWithdrawBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance not implemented")
}
func (*UnimplementedMsgServer) ExecuteTask(ctx context.Context, req *MsgExecuteTask) (*MsgExecuteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTask(ctx, req.(*MsgCreateTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/CancelTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelTask(ctx, req.(*MsgCancelTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/EditTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditTask(ctx, req.(*MsgEditTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/CreateExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateExecutor(ctx, req.(*MsgCreateExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/CancelExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelExecutor(ctx, req.(*MsgCancelExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/EditExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditExecutor(ctx, req.(*MsgEditExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/DepositBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositBalance(ctx, req.(*MsgDepositBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/WithdrawBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawBalance(ctx, req.(*MsgWithdrawBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specynetwork.specy.specy.Msg/ExecuteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteTask(ctx, req.(*MsgExecuteTask))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "specynetwork.specy.specy.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Msg_CreateTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _Msg_CancelTask_Handler,
		},
		{
			MethodName: "EditTask",
			Handler:    _Msg_EditTask_Handler,
		},
		{
			MethodName: "CreateExecutor",
			Handler:    _Msg_CreateExecutor_Handler,
		},
		{
			MethodName: "CancelExecutor",
			Handler:    _Msg_CancelExecutor_Handler,
		},
		{
			MethodName: "EditExecutor",
			Handler:    _Msg_EditExecutor_Handler,
		},
		{
			MethodName: "DepositBalance",
			Handler:    _Msg_DepositBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Msg_WithdrawBalance_Handler,
		},
		{
			MethodName: "ExecuteTask",
			Handler:    _Msg_ExecuteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "specy/specy/tx.proto",
}

func (m *MsgCreateTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheckData) > 0 {
		i -= len(m.CheckData)
		copy(dAtA[i:], m.CheckData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CheckData)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x40
	}
	if m.IntervalType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IntervalType))
		i--
		dAtA[i] = 0x38
	}
	if m.TaskType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleFiles) > 0 {
		i -= len(m.RuleFiles)
		copy(dAtA[i:], m.RuleFiles)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RuleFiles)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x40
	}
	if m.IntervalType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IntervalType))
		i--
		dAtA[i] = 0x38
	}
	if m.TaskType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RuleFiles) > 0 {
		i -= len(m.RuleFiles)
		copy(dAtA[i:], m.RuleFiles)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RuleFiles)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnclavePk) > 0 {
		i -= len(m.EnclavePk)
		copy(dAtA[i:], m.EnclavePk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EnclavePk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IasAttestationReport) > 0 {
		i -= len(m.IasAttestationReport)
		copy(dAtA[i:], m.IasAttestationReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IasAttestationReport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditExecutor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditExecutor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditExecutor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnclavePk) > 0 {
		i -= len(m.EnclavePk)
		copy(dAtA[i:], m.EnclavePk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EnclavePk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IasAttestationReport) > 0 {
		i -= len(m.IasAttestationReport)
		copy(dAtA[i:], m.IasAttestationReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IasAttestationReport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditExecutorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditExecutorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditExecutorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PacketData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Cproof) > 0 {
		i -= len(m.Cproof)
		copy(dAtA[i:], m.Cproof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cproof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RuleFiles)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovTx(uint64(m.TaskType))
	}
	if m.IntervalType != 0 {
		n += 1 + sovTx(uint64(m.IntervalType))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	l = len(m.CheckData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RuleFiles)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovTx(uint64(m.TaskType))
	}
	if m.IntervalType != 0 {
		n += 1 + sovTx(uint64(m.IntervalType))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	return n
}

func (m *MsgEditTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IasAttestationReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EnclavePk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditExecutor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IasAttestationReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EnclavePk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditExecutorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cproof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PacketData.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExecuteTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleFiles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			m.IntervalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleFiles = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalType", wireType)
			}
			m.IntervalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IasAttestationReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IasAttestationReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditExecutor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditExecutor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditExecutor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IasAttestationReport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IasAttestationReport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditExecutorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditExecutorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditExecutorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cproof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cproof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PacketData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
